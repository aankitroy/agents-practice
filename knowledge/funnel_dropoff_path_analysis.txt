{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww30040\viewh16760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 id: funnel_dropoff_path_analysis\
name: Funnel Drop-off Path Analysis\
description: Analyzes the paths taken by users who dropped off at a specific step in the funnel, helping identify what users do instead of progressing.\
when_to_use:\
  - template_type: "Drop-off Analysis"\
  - analysis_goal: "Understanding Abandonment"\
  - check_point_1: "When you need to understand why users abandon a funnel"\
  - check_point_2: "When you want to identify what users do instead of completing the funnel"\
  - query_type: "Drop-off Path Analysis"\
\
input_parameters:\
  required:\
    - user_id_field: "properties_device_id"   # Field that uniquely identifies users\
    - event_time_field: "event_time"          # Field containing the timestamp of events\
    - event_field: "event"                    # Field containing the event name\
    - funnel_steps: []                        # Array of step names in order\
    - dropoff_step: 1                         # The step after which to analyze dropoff (1-based index)\
    - start_date: "2023-01-01"                # Start date for analysis\
    - end_date: "2023-01-31"                  # End date for analysis\
    - database: "analytics"                   # Database name\
    - table_name: "events"                    # Table name\
    - conversion_window: 86400                # Time window in seconds for conversion (24 hours)\
  \
  optional:\
    - time_zone: "UTC"                        # Timezone for date calculations\
    - segment_filter: ""                      # Additional WHERE clause filter\
    - limit_results: 20                       # Number of top events to show\
\
output_fields:\
  - next_action: "Event name of the action taken after dropout"\
  - users_count: "Number of users who performed this action after dropout"\
  - total_occurrences: "Total number of times this action was performed"\
  - pct_of_dropoff_users: "Percentage of dropout users who performed this action"\
  - avg_occurrences_per_user: "Average times each user performed this action"\
  - avg_minutes_after_dropout: "Average time in minutes when this action was performed after the dropout step"\
\
result_table: "funnel_dropoff_path_results"   # Temporary table name for results\
dependencies:\
  - core_funnel_analysis                      # Depends on core funnel analysis\
execution_order: 6                            # Execute after core funnel analysis\
sql_template: "funnel_dropoff_path.sql"\
\
pre_processing: |\
  # Get the current and next step names based on dropoff_step\
  current_step = funnel_steps[dropoff_step - 1]\
  \
  # Add segment filter if present\
  if "segment_filter" in locals() and segment_filter and dropoff_step == 1:\
    current_step_filter = f"\{\{\{\{event_field\}\}\}\} = '\{current_step\}' AND \{segment_filter\}"\
  else:\
    current_step_filter = f"\{\{\{\{event_field\}\}\}\} = '\{current_step\}'"\
  \
  # If there's a next step, get it (for dropoff identification)\
  if dropoff_step < len(funnel_steps):\
    next_step = funnel_steps[dropoff_step]\
    next_step_filter = f"\{\{\{\{event_field\}\}\}\} = '\{next_step\}'"\
  else:\
    # If it's the last step, there's no next step to check\
    next_step = None\
    next_step_filter = "FALSE"  # This ensures no results for a non-existent next step\
  \
  # Generate the final query\
  final_query = sql_template\
    .replace("\{\{current_step_filter\}\}", current_step_filter)\
    .replace("\{\{next_step_filter\}\}", next_step_filter)\
    .replace("\{\{current_step\}\}", current_step)\
    # Replace other parameters\
\
-- funnel_dropoff_path.sql\
-- First get users who completed the current step\
WITH first_step_users AS (\
  SELECT\
    \{\{user_id_field\}\},\
    min(\{\{event_time_field\}\}) AS first_step_time\
  FROM \{\{database\}\}.\{\{table_name\}\}\
  WHERE \{\{event_time_field\}\} >= '\{\{start_date\}\}' AND \{\{event_time_field\}\} < '\{\{end_date\}\}'\
  AND \{\{current_step_filter\}\}\
  GROUP BY \{\{user_id_field\}\}\
),\
\
-- Identify users who never reached the next step within the conversion window\
dropoff_users AS (\
  SELECT\
    f.\{\{user_id_field\}\},\
    f.first_step_time\
  FROM first_step_users f\
  LEFT JOIN (\
    SELECT DISTINCT \{\{user_id_field\}\}\
    FROM \{\{database\}\}.\{\{table_name\}\}\
    WHERE \{\{event_time_field\}\} >= '\{\{start_date\}\}' AND \{\{event_time_field\}\} < dateAdd(day, 1, '\{\{end_date\}\}')\
    AND \{\{next_step_filter\}\}\
  ) s ON f.\{\{user_id_field\}\} = s.\{\{user_id_field\}\}\
  WHERE s.\{\{user_id_field\}\} IS NULL\
),\
\
-- For these users, get all events after they completed the current step\
post_dropoff_events AS (\
  SELECT\
    d.\{\{user_id_field\}\},\
    e.\{\{event_field\}\},\
    e.\{\{event_time_field\}\},\
    d.first_step_time,\
    dateDiff('second', d.first_step_time, e.\{\{event_time_field\}\}) AS seconds_after_step\
  FROM dropoff_users d\
  JOIN \{\{database\}\}.\{\{table_name\}\} e ON d.\{\{user_id_field\}\} = e.\{\{user_id_field\}\}\
  WHERE e.\{\{event_time_field\}\} > d.first_step_time\
  AND e.\{\{event_time_field\}\} < dateAdd(second, \{\{conversion_window\}\}, d.first_step_time)  -- Within conversion window\
  AND e.\{\{event_field\}\} != '\{\{current_step\}\}'  -- Exclude the step they dropped off at\
  ORDER BY d.\{\{user_id_field\}\}, e.\{\{event_time_field\}\}\
),\
\
-- Calculate path frequency\
event_frequency AS (\
  SELECT\
    \{\{event_field\}\} AS next_action,\
    count(DISTINCT \{\{user_id_field\}\}) AS users_count,\
    count(*) AS total_occurrences,\
    round(count(DISTINCT \{\{user_id_field\}\}) * 100.0 / (SELECT count(*) FROM dropoff_users), 2) AS pct_of_dropoff_users,\
    round(avg(seconds_after_step), 0) AS avg_seconds_after_dropout\
  FROM post_dropoff_events\
  GROUP BY \{\{event_field\}\}\
)\
\
-- Get top events by user count\
SELECT\
  next_action,\
  users_count,\
  total_occurrences,\
  pct_of_dropoff_users,\
  round(total_occurrences / users_count, 2) AS avg_occurrences_per_user,\
  round(avg_seconds_after_dropout / 60, 2) AS avg_minutes_after_dropout\
FROM event_frequency\
ORDER BY users_count DESC\
LIMIT \{\{limit_results\}\}\
\
Example usage:\
\
\{\
  "user_id_field": "properties_device_id",\
  "event_time_field": "event_time",\
  "event_field": "event",\
  "funnel_steps": ["login_completed", "meditation_completed"],\
  "dropoff_step": 1,\
  "start_date": "2025-03-20",\
  "end_date": "2025-03-27",\
  "database": "isha",\
  "table_name": "miracle_of_minds",\
  "conversion_window": 86400,\
  "segment_filter": "properties_type = 'signup'",\
  "limit_results": 20\
\}}